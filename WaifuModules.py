# -*- coding: utf-8 -*-
# meta developer: @Rezoxss
# scope: hikka_only

from .. import loader, utils
import logging
import random
import asyncio
import aiohttp
from PIL import Image, ImageDraw, ImageFont
import io
import textwrap

logger = logging.getLogger(__name__)

@loader.tds
class StableWaifuMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞–∫ @StableWaifuBot"""
    
    strings = {
        "name": "StableWaifu",
        "processing": "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...",
        "error": "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
        "no_prompt": "‚ùå –£–∫–∞–∂–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
        "stopped": "‚èπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "queue": "üìä –í –æ—á–µ—Ä–µ–¥–∏: {} –∑–∞–ø—Ä–æ—Å–æ–≤",
        "limit": "‚ö†Ô∏è –õ–∏–º–∏—Ç: –º–∞–∫—Å. {} —Å–∏–º–≤–æ–ª–æ–≤",
        "result": "üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {}"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "max_length",
                100,
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞",
                validator=loader.validators.Integer(minimum=10, maximum=500)
            ),
            loader.ConfigValue(
                "queue_limit",
                3,
                "–ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏",
                validator=loader.validators.Integer(minimum=1, maximum=10)
            ),
            loader.ConfigValue(
                "nsfw_enabled",
                True,
                "–†–∞–∑—Ä–µ—à–∏—Ç—å NSFW –∑–∞–ø—Ä–æ—Å—ã",
                validator=loader.validators.Boolean()
            )
        )
        self.generation_queue = asyncio.Queue()
        self.is_processing = False
        self.current_task = None
        self.waifu_styles = self.load_waifu_styles()

    def load_waifu_styles(self):
        """–°—Ç–∏–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞–π—Ñ—É"""
        return {
            "anime": ["–∞–Ω–∏–º–µ", "–º—É–ª—å—Ç—è—à–Ω—ã–π", "—Å—Ç–∏–ª—å –∞–Ω–∏–º–µ", "—è–ø–æ–Ω—Å–∫–∏–π"],
            "realistic": ["—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π", "—Ñ–æ—Ç–æ", "—Ä–µ–∞–ª–∏–∑–º", "photorealistic"],
            "hentai": ["—Ö–µ–Ω—Ç–∞–π", "18+", "—ç—Ä–æ—Ç–∏–∫–∞", "nsfw", "—Å–µ–∫—Å—É–∞–ª—å–Ω—ã–π"],
            "fantasy": ["—Ñ—ç–Ω—Ç–µ–∑–∏", "–º–∞–≥–∏—è", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–≤–æ–ª—à–µ–±–Ω—ã–π"],
            "game": ["–∏–≥—Ä–æ–≤–æ–π", "–≥–µ–π–º–µ—Ä", "–≤–∏–¥–µ–æ–∏–≥—Ä–∞", "–ø–∏–∫—Å–µ–ª—å"],
            "cyberpunk": ["–∫–∏–±–µ—Ä–ø–∞–Ω–∫", "—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–Ω—ã–π", "–Ω–µ–æ–Ω–æ–≤—ã–π", "—Ç–µ—Ö–Ω–æ"]
        }

    async def client_ready(self, client, db):
        self._client = client

    def detect_style(self, prompt):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –ø–æ –ø—Ä–æ–º–ø—Ç—É"""
        prompt_lower = prompt.lower()
        for style, keywords in self.waifu_styles.items():
            for keyword in keywords:
                if keyword in prompt_lower:
                    return style
        return random.choice(list(self.waifu_styles.keys()))

    def generate_ai_image(self, prompt, style):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Å–µ–≤–¥–æ-AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            width, height = 512, 512
            image = Image.new('RGB', (width, height), color='black')
            draw = ImageDraw.Draw(image)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º "—Å—Ç–∏–ª—å" based on prompt
            colors = {
                "anime": [(255, 105, 180), (255, 20, 147), (255, 182, 193)],
                "realistic": [(100, 100, 100), (150, 150, 150), (200, 200, 200)],
                "hentai": [(255, 0, 0), (139, 0, 0), (178, 34, 34)],
                "fantasy": [(0, 255, 255), (0, 191, 255), (30, 144, 255)],
                "game": [(0, 255, 0), (50, 205, 50), (144, 238, 144)],
                "cyberpunk": [(138, 43, 226), (75, 0, 130), (148, 0, 211)]
            }
            
            # –†–∏—Å—É–µ–º –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
            for i in range(100):
                x1 = random.randint(0, width)
                y1 = random.randint(0, height)
                x2 = random.randint(0, width)
                y2 = random.randint(0, height)
                color = random.choice(colors.get(style, [(255, 255, 255)]))
                draw.line([x1, y1, x2, y2], fill=color, width=random.randint(1, 5))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–º–ø—Ç–æ–º
            try:
                font = ImageFont.load_default()
                wrapped_text = textwrap.fill(prompt, width=30)
                draw.text((10, 10), wrapped_text, fill=(255, 255, 255), font=font)
            except:
                pass
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bytes
            img_byte_arr = io.BytesIO()
            image.save(img_byte_arr, format='PNG')
            img_byte_arr.seek(0)
            
            return img_byte_arr
            
        except Exception as e:
            logger.error(f"Image generation error: {e}")
            return None

    async def process_queue(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        while not self.generation_queue.empty():
            try:
                message, prompt = await self.generation_queue.get()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å
                style = self.detect_style(prompt)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                processing_msg = await message.reply(self.strings("processing"))
                await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                
                image_data = self.generate_ai_image(prompt, style)
                
                if image_data:
                    await processing_msg.delete()
                    await message.reply(
                        self.strings("result").format(prompt),
                        file=image_data
                    )
                else:
                    await processing_msg.edit(self.strings("error"))
                    
                self.generation_queue.task_done()
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"Queue error: {e}")
                continue

    @loader.command()
    async def image(self, message):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - .image <–∑–∞–ø—Ä–æ—Å>"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings("no_prompt"))
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞
        if len(args) > self.config["max_length"]:
            await utils.answer(message, self.strings("limit").format(self.config["max_length"]))
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º NSFW
        if not self.config["nsfw_enabled"] and any(word in args.lower() for word in self.waifu_styles["hentai"]):
            await utils.answer(message, "‚ùå NSFW –∑–∞–ø—Ä–æ—Å—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã")
            return
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        if self.generation_queue.qsize() >= self.config["queue_limit"]:
            await utils.answer(message, self.strings("queue").format(self.config["queue_limit"]))
            return
            
        await self.generation_queue.put((message, args))
        await utils.answer(message, f"üì• –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {args}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
        if not self.is_processing:
            self.is_processing = True
            asyncio.create_task(self.process_queue())

    @loader.command()
    async def stop(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"""
        if not self.generation_queue.empty():
            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            while not self.generation_queue.empty():
                try:
                    self.generation_queue.get_nowait()
                    self.generation_queue.task_done()
                except:
                    break
            await utils.answer(message, self.strings("stopped"))
        else:
            await utils.answer(message, "‚úÖ –û—á–µ—Ä–µ–¥—å —É–∂–µ –ø—É—Å—Ç–∞")

    @loader.command()
    async def waifustats(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏"""
        queue_size = self.generation_queue.qsize()
        status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if self.is_processing else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        
        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üì• –í –æ—á–µ—Ä–µ–¥–∏: {queue_size}\n"
            f"üìè –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–∞: {self.config['max_length']} —Å–∏–º–≤.\n"
            f"üö¶ –ú–∞–∫—Å. –æ—á–µ—Ä–µ–¥—å: {self.config['queue_limit']}\n"
            f"üîû NSFW: {'‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ' if self.config['nsfw_enabled'] else '‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–æ'}"
        )
        await utils.answer(message, stats_text)

    @loader.command()
    async def waifustyle(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏"""
        styles_text = "üé® –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏:\n\n"
        for style, keywords in self.waifu_styles.items():
            styles_text += f"‚Ä¢ {style.capitalize()}: {', '.join(keywords[:3])}\n"
        
        styles_text += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ —Å–ª–æ–≤–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —Å—Ç–∏–ª—è!"
        await utils.answer(message, styles_text)

    async def on_unload(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ"""
        self.is_processing = False
        while not self.generation_queue.empty():
            try:
                self.generation_queue.get_nowait()
                self.generation_queue.task_done()
            except:
                break
